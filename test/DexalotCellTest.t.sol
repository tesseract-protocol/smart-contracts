// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

import "forge-std/Test.sol";
import "../src/interfaces/ICell.sol";
import "@ictt/TokenHome/ERC20TokenHome.sol";
import "@ictt/TokenHome/NativeTokenHome.sol";
import "@ictt/interfaces/ITokenTransferrer.sol";
import "@ictt/interfaces/IERC20TokenTransferrer.sol";
import "@ictt/interfaces/INativeTokenTransferrer.sol";
import "@ictt/WrappedNativeToken.sol";
import "./mocks/TeleporterRegistryMock.sol";
import "./mocks/WarpMessengerMock.sol";
import "../src/DexalotSimpleSwapCell.sol";

contract DexalotCellTest is Test {
    using stdStorage for StdStorage;

    event SendCrossChainMessage();

    bytes32 public constant CCHAIN_BLOCKCHAIN_ID = 0x0427d4b22a2a78bcddd456742caf91b56badbff985ee19aef14573e7343fd652;
    bytes32 public constant COQ_BLOCKCHAIN_ID = 0x898b8aa8353f2b79ee1de07c36474fcee339003d90fa06ea3a90d9e88b7d7c33;
    address public constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;
    address public constant USDC = 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E;
    address public constant TELEPORTER_REGISTRY = 0x7C43605E14F391720e1b37E49C78C4b03A488d98;
    address public constant TELEPORTER = 0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf;
    uint256 public constant MIN_TELEPORTER_VERSION = 1;
    address public constant WARP_MESSENGER = 0x0200000000000000000000000000000000000005;
    address constant MAINNET_RFQ = 0xEed3c159F3A96aB8d41c8B9cA49EE1e5071A7cdD;
    uint256 constant SWAP_GAS_ESTIMATE = 150_000;
    address payable constant AVAX_TOKEN_HOME = payable(0x30CdA6AF61c3A07ca81909699C85307DEF4398E5);
    address constant USDC_TOKEN_HOME = 0x97bBA61F61f2b0eEF60428947b990457f8eCb3a3;

    address public constant DEXALOT_SIMPLE_SWAP_CELL = 0xe00D8999adf582D766de1e45Bf1E30CE75F171ae;

    bytes public constant PAYLOAD_AVAX_USDC =
        hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000020898b8aa8353f2b79ee1de07c36474fcee339003d90fa06ea3a90d9e88b7d7c3300000000000000000000000028af629a9f3ece3c8d9f0b7ccf6349708cec8cfb000000000000000000000000a7f586470cd7b70f9b5893eee85c0b5354541a99000000000000000000000000e00d8999adf582d766de1e45bf1e30ce75f171ae0000000000000000000000000000000000000000000000000162ea854d0fc000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000002625a0000000000000000000000000cae225d77534ef0d20d8e42d97e2fb84002c7f050000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000805f1da684a2e3d133facb2fcf4c42d4284ef4cd4db7eb0d171bdc84c818c3079b898b8aa8353f2b79ee1de07c36474fcee339003d90fa06ea3a90d9e88b7d7c3300000000000000000000000028af629a9f3ece3c8d9f0b7ccf6349708cec8cfb0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000cae225d77534ef0d20d8e42d97e2fb84002c7f0500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007a12000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000002dc6c000000000000000000000000000000000000000000000000000000000002625a00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000949a4dc0d6c6b261a648b5542f550ab9fb1acdf10427d4b22a2a78bcddd456742caf91b56badbff985ee19aef14573e7343fd6520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000020e00d8999adf582d766de1e45bf1e30ce75f171ae783bbab48e746000000000000000000000000000000000000000000000000000000000000000000067fe3e32000000000000000000000000b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eed3c159f3a96ab8d41c8b9ca49ee1e5071a7cdd000000000000000000000000cae225d77534ef0d20d8e42d97e2fb84002c7f0500000000000000000000000000000000000000000000000000000000001e487f0000000000000000000000000000000000000000000000000162ea854d0fc000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000001e487f000000000000000000000000000000000000000000000000000000000000004100f41dd82fe35ee6b720b03e400ed67e573bd6fa43396d1df55614868694a9c44591e71d793858b6a8682cea61197ee6078c195171092fb5d1e190fa13dbe76d1c00000000000000000000000000000000000000000000000000000000000000";

    bytes public constant PAYLOAD_USDC_AVAX =
        hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000020898b8aa8353f2b79ee1de07c36474fcee339003d90fa06ea3a90d9e88b7d7c3300000000000000000000000000396774d1e5b1c2b175b0f0562f921887678771000000000000000000000000a7f586470cd7b70f9b5893eee85c0b5354541a99000000000000000000000000e00d8999adf582d766de1e45bf1e30ce75f171ae00000000000000000000000000000000000000000000000000000000001e2dfd000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000002625a0000000000000000000000000cae225d77534ef0d20d8e42d97e2fb84002c7f0500000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000008023907b29af1823350f70b86d05e942f95342d62930c4f4926156a97ae2c25d44898b8aa8353f2b79ee1de07c36474fcee339003d90fa06ea3a90d9e88b7d7c3300000000000000000000000000396774d1e5b1c2b175b0f0562f9218876787710000000000000000000000000000000000000000000000000000000000000001000000000000000000000000cae225d77534ef0d20d8e42d97e2fb84002c7f0500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007a12000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000002dc6c000000000000000000000000000000000000000000000000000000000002625a00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000949a4dc0d6c6b261a648b5542f550ab9fb1acdf10427d4b22a2a78bcddd456742caf91b56badbff985ee19aef14573e7343fd6520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000020e00d8999adf582d766de1e45bf1e30ce75f171aee509c7805babc000000000000000000000000000000000000000000000000000000000000000000067fe3fc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e000000000000000000000000eed3c159f3a96ab8d41c8b9ca49ee1e5071a7cdd000000000000000000000000cae225d77534ef0d20d8e42d97e2fb84002c7f0500000000000000000000000000000000000000000000000001620858eccd444c00000000000000000000000000000000000000000000000000000000001e2dfd000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000001620858eccd444c00000000000000000000000000000000000000000000000000000000000000410b7a388332a8627642b347e4e86b8c814eaf27fcd7e9b531f601ec806c759fa85874ca530d90088ae3bd4b26d70fd8ca9ee1903366be05400790973dd414d5af1c00000000000000000000000000000000000000000000000000000000000000";

    TeleporterRegistryMock public teleporterRegistry;
    DexalotSimpleSwapCell public dexalotSimpleSwapCell;

    function test_Swap_AVAX_USDC() public {
        vm.createSelectFork(vm.envString("CCHAIN_RPC_URL"), 60146994);
        WarpMessengerMock warp = new WarpMessengerMock();
        vm.etch(WARP_MESSENGER, address(warp).code);

        dexalotSimpleSwapCell = new DexalotSimpleSwapCell(
            address(this), WAVAX, TELEPORTER_REGISTRY, MIN_TELEPORTER_VERSION, MAINNET_RFQ, SWAP_GAS_ESTIMATE
        );

        vm.etch(DEXALOT_SIMPLE_SWAP_CELL, address(dexalotSimpleSwapCell).code);
        vm.startPrank(TELEPORTER);
        NativeTokenHome(AVAX_TOKEN_HOME).receiveTeleporterMessage(
            COQ_BLOCKCHAIN_ID, 0x28aF629a9F3ECE3c8D9F0b7cCf6349708CeC8cFb, PAYLOAD_AVAX_USDC
        );
    }

    function test_Swap_USDC_AVAX() public {
        vm.createSelectFork(vm.envString("CCHAIN_RPC_URL"), 60318435);
        WarpMessengerMock warp = new WarpMessengerMock();
        vm.etch(WARP_MESSENGER, address(warp).code);

        dexalotSimpleSwapCell = new DexalotSimpleSwapCell(
            address(this), WAVAX, TELEPORTER_REGISTRY, MIN_TELEPORTER_VERSION, MAINNET_RFQ, SWAP_GAS_ESTIMATE
        );

        vm.etch(DEXALOT_SIMPLE_SWAP_CELL, address(dexalotSimpleSwapCell).code);
        TransferrerMessage memory payload = abi.decode(PAYLOAD_USDC_AVAX, (TransferrerMessage));
        SingleHopCallMessage memory message = abi.decode(payload.payload, (SingleHopCallMessage));

        deal(USDC, address(this), 100e6);
        ERC20(USDC).approve(DEXALOT_SIMPLE_SWAP_CELL, 100e6);
        DexalotSimpleSwapCell(payable(DEXALOT_SIMPLE_SWAP_CELL)).receiveTokens(
            COQ_BLOCKCHAIN_ID,
            0x00396774d1E5b1C2B175B0F0562f921887678771,
            address(this),
            USDC,
            100e6,
            message.recipientPayload
        );
    }
}
